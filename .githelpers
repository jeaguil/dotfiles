#!/bin/bash

HASH="%C(always,yellow)%h%C(always,reset)"
RELATIVE_TIME="%C(always,green)%ar%C(always,reset)"
REFS="%C(always,red)%d%C(always,reset)"
SUBJECT="%s"

RESET="\033[0m"
YELLOW="\033[33m"
CYAN="\033[36m"

FORMAT="$HASH $RELATIVE_TIME $REFS $SUBJECT"

pretty_git_log() {
  git log --pretty="tformat:${FORMAT}" "$@" |
      less -FXRS
}

pull_remote() {
  if [ -z "$1" ]; then
    echo "Usage: git p-re <branch_name>"
    echo "  Fetches and checks out a remote branch, creating a local tracking branch"
    return 1
  fi

  if git rev-parse --quiet --verify "$1"; then
    echo "Local branch $1 already exists.";
  else
    git fetch origin "$1" && git checkout -b "$1" --track origin/"$1";
  fi
}

switch_prefix() {
  if [ -z "$1" ]; then
    echo "Usage: git s-pr <prefix>"
    echo "  Switches to the first branch that matches the given prefix"
    return 1
  fi

  branch=$(git branch --list "$1*" | head -n 1 | sed "s/^[* ]*//");
  if [ -z "$branch" ]; then
    echo "No branch found matching prefix $1";
  else
    git switch "$branch";
  fi;
}

set_upstream() {
  if [ -z "$1" ]; then
    branch=$(git rev-parse --abbrev-ref HEAD)
  else
    branch="$1"
  fi

  if git rev-parse --quiet --verify "origin/$branch"; then
    git branch --set-upstream-to=origin/"$branch" "$branch";
  else
    echo "Remote branch origin/$branch does not exist.";
  fi
}

clean_local_branches() {
  git fetch --prune
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  for branch in $(git branch --format='%(refname:short) %(upstream:track)' | awk '$2 == "[gone]" {print $1}')
  do
    if [ "$branch" != "master" ] && [ "$branch" != "main" ] && [ "$branch" != "$current_branch" ]; then
      git branch -D "$branch"
    fi
  done
}

color_verbose_branch() {
  git branch -vv | awk -v yellow="$YELLOW" -v cyan="$CYAN" -v normal="$RESET" '
  {
    if ($1 == "*") {
      printf "%s %s%s%s %s", $1, yellow, $2, normal, $3
      if (match($4, /^\[/)) {
        printf " %s%s%s", cyan, $4, normal
        for (i=5; i<=NF; i++) printf " %s", $i
      } else {
        for (i=4; i<=NF; i++) printf " %s", $i
      }
      print ""
    } else {
      printf "  %s%s%s %s", yellow, $1, normal, $2
      if (match($3, /^\[/)) {
        printf " %s%s%s", cyan, $3, normal
        for (i=4; i<=NF; i++) printf " %s", $i
      } else {
        for (i=3; i<=NF; i++) printf " %s", $i
      }
      print ""
    }
  }
  '
}